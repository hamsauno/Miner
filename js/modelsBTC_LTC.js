// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let jsonData = []; // –°—é–¥–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ calc.json
let currentAlgorithm = "SHA-256"; // –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", async () => {
  console.log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");

  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
  const algorithmSelect = document.getElementById("algorithmSelect");
  const manufacturerSelect = document.getElementById("manufacturerSelect");
  const asicModel = document.getElementById("asicModel");
  const calcBtn = document.getElementById("calculateBtn");

  if (!algorithmSelect || !manufacturerSelect || !asicModel || !calcBtn) {
    console.error("‚ùå –û–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  algorithmSelect.addEventListener("change", onAlgorithmChange);
  manufacturerSelect.addEventListener("change", updateModelList);
  asicModel.addEventListener("change", updateAsicSpecs);
  calcBtn.addEventListener("click", calculateProfit);

  await fetchKursData();      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  await onAlgorithmChange();  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
});


// üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ kursBTC.txt
async function fetchKursData() {
  const url = "https://hamsauno.github.io/Miner/kursBTC.txt";

  console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ —Å:", url);
  try {
    const response = await fetch(url);
    if (!response.ok) throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –°—Ç–∞—Ç—É—Å: " + response.status);

    const data = (await response.text()).trim().split("\n");
    console.log("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:", data);

    if (data.length >= 9) {
      const values = {
        btcPrice: parseFloat(data[0]),
        usdtPrice: parseFloat(data[1]),
        profitPerTH: parseFloat(data[2]),
        ltcPrice: parseFloat(data[3]),
        dogePrice: parseFloat(data[4]),
        bellPrice: parseFloat(data[5]),
        profitPerLTC: parseFloat(data[6]),
        profitPerDOGE: parseFloat(data[7]),
        profitPerBELL: parseFloat(data[8]),
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
      Object.entries(values).forEach(([id, val]) => {
        const el = document.getElementById(id);
        if (el && !isNaN(val)) {
          el.value = val.toFixed(id.startsWith("profit") ? 8 : 2);
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${id}`, val);
        }
      });
    } else {
      console.warn("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ kursBTC.txt");
    }
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ kursBTC.txt:", e);
  }
}


// üìò –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (SHA-256 –∏–ª–∏ Scrypt)
async function onAlgorithmChange() {
  const algorithmSelect = document.getElementById("algorithmSelect");
  currentAlgorithm = algorithmSelect.value;

  await fetchJsonData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
  const manufacturerSelect = document.getElementById("manufacturerSelect");
  const uniqueManufacturers = [...new Set(jsonData.map(item => item["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"].toLowerCase()))];
  manufacturerSelect.innerHTML = "";

  uniqueManufacturers.forEach(m => {
    const opt = document.createElement("option");
    opt.value = m;
    opt.textContent = m.charAt(0).toUpperCase() + m.slice(1);
    manufacturerSelect.appendChild(opt);
  });

  if (uniqueManufacturers.length > 0) {
    manufacturerSelect.value = uniqueManufacturers[0];
    updateModelList();
  }
}


// üì• –ó–∞–≥—Ä—É–∑–∫–∞ JSON-–¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–∞–π–Ω–µ—Ä–æ–≤
async function fetchJsonData() {
  try {
    const response = await fetch("https://hamsauno.github.io/Miner/json/calc.json");
    const data = await response.json();
    jsonData = data["–†–∞—Å—á—ë—Ç—ã"].filter(item => item["–ê–ª–≥–æ—Ä–∏—Ç–º"] === currentAlgorithm);
    console.log("üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É", currentAlgorithm, jsonData);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞:", e);
  }
}


// üß© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
function updateModelList() {
  const manufacturer = document.getElementById("manufacturerSelect").value;
  const modelSelect = document.getElementById("asicModel");
  modelSelect.innerHTML = "";

  const models = jsonData.filter(item => item["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"].toLowerCase() === manufacturer);
  models.forEach(item => {
    const opt = document.createElement("option");
    opt.value = `${item["–ú–æ–¥–µ–ª—å"]}|${item["–•–µ—à—Ä–µ–π—Ç"]}`;
    opt.textContent = `${item["–ú–æ–¥–µ–ª—å"]} (${item["–•–µ—à—Ä–µ–π—Ç"]} ${item["–ï–¥. –∏–∑–º."]})`;
    modelSelect.appendChild(opt);
  });

  if (models.length > 0) {
    modelSelect.selectedIndex = 0;
    updateAsicSpecs();
  }
}


// ‚öôÔ∏è –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
function updateAsicSpecs() {
  const [model, hashrate] = document.getElementById("asicModel").value.split("|");
  const item = jsonData.find(i => i["–ú–æ–¥–µ–ª—å"] === model && i["–•–µ—à—Ä–µ–π—Ç"] === hashrate);

  if (item) {
    document.getElementById("hashrate").textContent = item["–•–µ—à—Ä–µ–π—Ç"];
    document.getElementById("edprice").textContent = item["–ï–¥. –∏–∑–º."];
    document.getElementById("power").textContent = Math.round(item["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"]);

    const usdt = parseFloat(document.getElementById("usdtPrice").value);
    document.getElementById("asicCost").value = Math.ceil(item["–¶–µ–Ω–∞"] * usdt / 100) * 100;
  }
}


// üßÆ –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
function calculateProfit() {
  const usdtPrice = parseFloat(document.getElementById("usdtPrice").value);
  const hashrate = parseFloat(document.getElementById("hashrate").textContent);
  const power = parseFloat(document.getElementById("power").textContent);
  const electricityCost = parseFloat(document.getElementById("electricityCost").value);
  const asicCost = parseFloat(document.getElementById("asicCost").value);

  if ([hashrate, power, electricityCost, asicCost].some(isNaN)) {
    return alert("‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
  }

  let dailyIncome = 0;

  if (currentAlgorithm === "SHA-256") {
    const btcPrice = parseFloat(document.getElementById("btcPrice").value);
    const profitPerTH = parseFloat(document.getElementById("profitPerTH").value);
    dailyIncome = hashrate * profitPerTH * btcPrice;
  } else if (currentAlgorithm === "Scrypt") {
    const ltcPrice = parseFloat(document.getElementById("ltcPrice").value);
    const dogePrice = parseFloat(document.getElementById("dogePrice").value);
    const bellPrice = parseFloat(document.getElementById("bellPrice").value);
    const profitPerLTC = parseFloat(document.getElementById("profitPerLTC").value);
    const profitPerDOGE = parseFloat(document.getElementById("profitPerDOGE").value);
    const profitPerBELL = parseFloat(document.getElementById("profitPerBELL").value);

    dailyIncome =
      (hashrate * profitPerLTC * ltcPrice) +
      (hashrate * profitPerDOGE * dogePrice) +
      (hashrate * profitPerBELL * bellPrice);
  }

  const dailyElectricityCost = ((power / 1000) * electricityCost * 24) / usdtPrice;
  const dailyProfit = dailyIncome - dailyElectricityCost;
  const monthlyProfit = dailyProfit * 30.5;
  const yearlyProfit = dailyProfit * 365;
  const roi = (yearlyProfit / (asicCost / usdtPrice)) * 100;
  const payback = ((asicCost / usdtPrice) / dailyProfit) / 30.5;

  // üí∞ –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  document.getElementById("income").innerText = dailyIncome.toFixed(2);
  document.getElementById("income_rub").innerText = (dailyIncome * usdtPrice).toLocaleString('ru-RU');

  document.getElementById("profit").innerText = dailyProfit.toFixed(2);
  document.getElementById("profit_rub").innerText = (dailyProfit * usdtPrice).toLocaleString('ru-RU');

  document.getElementById("incomeMonth").innerText = (dailyIncome * 30.5).toFixed(2);
  document.getElementById("incomeMonth_rub").innerText = (dailyIncome * 30.5 * usdtPrice).toLocaleString('ru-RU');

  document.getElementById("incomeYear").innerText = (dailyIncome * 365).toFixed(2);
  document.getElementById("incomeYear_rub").innerText = (dailyIncome * 365 * usdtPrice).toLocaleString('ru-RU');

  document.getElementById("profitMonth").innerText = monthlyProfit.toFixed(2);
  document.getElementById("profitMonth_rub").innerText = (monthlyProfit * usdtPrice).toLocaleString('ru-RU');

  document.getElementById("profitYear").innerText = yearlyProfit.toFixed(2);
  document.getElementById("profitYear_rub").innerText = (yearlyProfit * usdtPrice).toLocaleString('ru-RU');

  document.getElementById("roi").innerText = roi.toFixed(2);
  document.getElementById("roi_rub").innerText = roi.toFixed(2);

  document.getElementById("payback").innerText = payback.toFixed(0);
  document.getElementById("payback_rub").innerText = payback.toFixed(0);
}


